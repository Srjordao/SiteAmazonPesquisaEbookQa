name: Testes Regressivos Ebook QA Iniciante

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 10,13,17 * * *"
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v2

      - name: Configurar ambiente Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x  # Altere para a vers√£o do Python que voc√™ est√° usando

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install selenium
          pip install webdriver_manager
          pip install pytesseract
          pip install opencv-python

      - name: Instalar o Google Chrome (√∫ltima vers√£o)
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable


      - name: Obter a vers√£o do Google Chrome
        id: get-chrome-version
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oP '(?<=Google Chrome )[^ ]+')
          echo "CHROME_VERSION=${CHROME_VERSION}" >> $GITHUB_ENV
          echo "Vers√£o do Google Chrome: $CHROME_VERSION"

      - name: Instalar o ChromeDriver
        run: |
          CHROME_VERSION=${{ env.CHROME_VERSION }}
          CHROME_DRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | jq -r --arg CHROME_VERSION "$CHROME_VERSION" '.versions[] | select(.version==$CHROME_VERSION) | .downloads.chromedriver[] | select(.platform=="linux64").url')
          wget $CHROME_DRIVER_URL -O chromedriver_linux64.zip
          unzip chromedriver_linux64.zip -d chromedriver-linux64
          chmod +x chromedriver-linux64/chromedriver-linux64/chromedriver
          sudo mv chromedriver-linux64/chromedriver-linux64/chromedriver /usr/local/bin/
          rm -r chromedriver_linux64.zip chromedriver-linux64

      - name: Executar testes
        run: python tests/test_amazon.py

      - name: Criar Issue se Testes Falharem
        if: always()  # Executa sempre, independentemente do sucesso ou falha
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // Lendo o arquivo output.xml
              const xmlFilePath = path.join(process.env.GITHUB_WORKSPACE, 'output', 'output.xml');
              const xmlContent = fs.existsSync(xmlFilePath) ? fs.readFileSync(xmlFilePath, 'utf8') : null;

              // Verifica se o arquivo output.xml foi encontrado e tem conte√∫do
              if (!xmlContent || xmlContent.trim() === '') {
                console.log('‚ö†Ô∏è Arquivo output.xml n√£o encontrado ou est√° vazio. N√£o ser√° criada uma issue.');
                return;
              }

              // Procurando por mensagens de falha no XML
              const failRegex = /<status status="FAIL".*?>\s*(.*?)\s*<\/status>/gi;
              let match;
              let failText = '';

              while ((match = failRegex.exec(xmlContent)) !== null) {
                failText += `üí• ${match[1].trim()}\n\n`;
              }

              // Se n√£o houver falhas, n√£o cria a issue
              if (!failText) {
                console.log('üéâ Todos os testes passaram. N√£o ser√° criada uma issue.');
                return;
              }

              // Configura√ß√£o dos detalhes da issue
              const issueTitle = `‚ö†Ô∏è Testes falharam em ${context.workflow} - ${new Date().toISOString()}`;

              // Limite de caracteres para o corpo da issue
              const characterLimit = 15000;

              // Criar corpo da issue com os detalhes dos erros
              const issueBody = `
                ## üõë Detalhes do Erro

                **‚ö†Ô∏è Logs contendo "FAIL":**
                \`\`\`
                ${failText.slice(0, characterLimit)}
                \`\`\`

                üöÄ **A√ß√£o Recomendada:** Verifique os logs acima para identificar e corrigir os erros.
              `;

              // Criar a issue no reposit√≥rio
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['bug', 'automated test failure', '‚ö†Ô∏è urgent'],
              });
            } catch (error) {
              console.log('‚ùå Erro ao processar o arquivo XML ou criar a issue:', error.message);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
